name: Build XTools Plugin (Simplified)

on:
  workflow_dispatch:

jobs:
  # Windows build (using your local computer as self-hosted runner)
  build-windows:
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        ue_version: ['5.3']  # Focus on version 5.3 first, add other versions after success
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    # Use pre-installed UE version on your local computer
    - name: Setup UE Path
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        # Focus on UE 5.3 version - adjust according to your actual installation path
        # F Drive: F:\Epic Games\UE_5.3\Engine
        Write-Host "[INFO] Detecting UE 5.3 installation path..."
        $ue_paths = @(
          "F:\Epic Games\UE_5.3",  # Your actual installation path (F drive)
          "D:\Program Files\Epic Games\UE_5.3",
          "C:\Program Files\Epic Games\UE_5.3"
        )
        
        $ue_path = $null
        foreach ($path in $ue_paths) {
          Write-Host "  Checking path: $path"
          if (Test-Path $path) {
            $ue_path = $path
            Write-Host "  [SUCCESS] Found UE installation: $path"
            break
          } else {
            Write-Host "  [ERROR] Path not found: $path"
          }
        }
        
        if (-not $ue_path) {
          Write-Error "[ERROR] Error: UE 5.3 not found in any of these locations: $($ue_paths -join ', ')"
          exit 1
        }
        
        # Verify key files
        $uat_path = "$ue_path\Engine\Build\BatchFiles\RunUAT.bat"
        if (-not (Test-Path $uat_path)) {
          Write-Error "[ERROR] Error: RunUAT.bat not found at: $uat_path"
          exit 1
        }
        
        echo "UE_PATH=$ue_path" >> $env:GITHUB_ENV
        echo "UE_VERSION=5.3" >> $env:GITHUB_ENV
        Write-Host "[TARGET] Using UE 5.3 installation at: $ue_path"
        Write-Host "[FOUND] Found RunUAT.bat at: $uat_path"
        
        # Detect VS2022 installation path (simplified)
        Write-Host "[CHECK] Detecting VS2022 installation path..."
        $vs_main_path = "E:\VisualStudio\2022"
        if (Test-Path $vs_main_path) {
          echo "VS2022INSTALLDIR=$vs_main_path" >> $env:GITHUB_ENV
          Write-Host "[FOUND] Found VS2022 at: $vs_main_path"
        } else {
          Write-Host "[WARNING] Warning: VS2022 not found at E:\VisualStudio\2022, UE BuildTool will auto-detect"
        }
        
        # Verify plugin file exists
        $plugin_file = "${{ github.workspace }}\XTools.uplugin"
        Write-Host "[CHECK] Checking plugin file: $plugin_file"
        if (Test-Path $plugin_file) {
          Write-Host "[SUCCESS] Plugin file exists: $plugin_file"
        } else {
          Write-Error "[ERROR] Error: Plugin file not found: $plugin_file"
          exit 1
        }
        
    # Manual plugin build (supports three platforms: Win64+Linux+Mac)
    - name: Build Plugin
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "[START] Starting XTools plugin build (UE 5.3)..."
        
        # Simplified paths and arguments based on the NoHostProject strategy
        $plugin_path = "${{ github.workspace }}\XTools.uplugin"
        $output_path = "${{ github.workspace }}\PackagedPlugin\XTools-UE_5.3-AllPlatforms"
        $uat_path = "$env:UE_PATH\Engine\Build\BatchFiles\RunUAT.bat"
        
        Write-Host "[INFO] Build Configuration:"
        Write-Host "  [UE] UE Version: 5.3"
        Write-Host "  [PLUGIN] Plugin File: $plugin_path"  
        Write-Host "  [DIR] Output Directory: $output_path"
        Write-Host "  [FOUND] UAT Tool: $uat_path"
        Write-Host "  [STRATEGY] Using an existing host project: F:\Unreal Projects\CPP\CPP.uproject"
        
        # Create output directory
        New-Item -ItemType Directory -Force -Path $output_path | Out-Null
        
        # --- FINAL STRATEGY V4: Use a real, existing host project ---
        # Replicating the user's local successful setup is the most reliable path.
        # We will use the provided C++ project as the build host. This guarantees that UAT
        # has a valid, complete context and will not generate a flawed temporary project.
        
        $host_project_path = "F:\Unreal Projects\CPP\CPP.uproject"

        Write-Host "[INFO] Using existing host project at: $host_project_path"
        if (-not (Test-Path $host_project_path)) {
            Write-Error "[ERROR] The specified host project was not found: $host_project_path"
            exit 1
        }

        # The plugin must be "discoverable" by the host project.
        # The most reliable way is to place it in the project's Plugins directory.
        $target_plugin_dir = "F:\Unreal Projects\CPP\Plugins\XTools"
        Write-Host "[SETUP] Copying plugin from ${{ github.workspace }} to $target_plugin_dir"
        Copy-Item -Path "${{ github.workspace }}\*" -Destination $target_plugin_dir -Recurse -Force

        $plugin_path_in_project = Join-Path $target_plugin_dir "XTools.uplugin"
        Write-Host "[INFO] Plugin is now located at: $plugin_path_in_project"

        $buildArgs = @(
          "BuildPlugin"
          "-Plugin=`"$plugin_path_in_project`""
          "-Package=`"$output_path`""
          "-Project=`"$host_project_path`"" # Force UAT to use the REAL project
          "-TargetPlatforms=Win64+Linux+Mac"
          "-StrictIncludes"
        )
        
        # CRITICAL: Initialize the Visual Studio Developer Environment
        Write-Host "[CRITICAL] Initializing Visual Studio Developer Environment..."
        $vcvars_path = Join-Path $env:VS2022INSTALLDIR "VC\Auxiliary\Build\vcvarsall.bat"
        
        if (-not (Test-Path $vcvars_path)) {
            Write-Error "[ERROR] vcvarsall.bat not found at $vcvars_path. Cannot create VS build environment."
            exit 1
        }
        
        Write-Host "[SUCCESS] Found vcvarsall.bat at: $vcvars_path"
        Write-Host ""
        
        # Chain the vcvarsall.bat setup and the UAT command together.
        $command_chain = "call `"$vcvars_path`" x64 && `"$uat_path`" $($buildArgs -join ' ')"
        
        Write-Host "[EXEC] Executing build within a prepared VS environment via cmd.exe..."
        Write-Host "  Command Chain: $command_chain"
        Write-Host ""
        
        cmd.exe /c $command_chain
          
        if ($LASTEXITCODE -ne 0) {
          Write-Host ""
          Write-Error "[ERROR] Error: Plugin build failed with exit code: $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        
        Write-Host ""
        Write-Host "[COMPLETE] Build completed: UE 5.3 plugin build successful"
        
    - name: List Build Output
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "[CHECK] Checking UE 5.3 build output..."
        $output_path = "${{ github.workspace }}\PackagedPlugin\XTools-UE_5.3-AllPlatforms"
        
        if (Test-Path $output_path) {
          Write-Host "[SUCCESS] Build output directory exists: $output_path"
          Write-Host ""
          
          # File statistics
          $allFiles = Get-ChildItem -Path $output_path -Recurse -File
          $totalSize = ($allFiles | Measure-Object -Property Length -Sum).Sum
          Write-Host "[STATS] Build Statistics:"
          Write-Host "  [DIR] Total Files: $($allFiles.Count)"
          Write-Host "  [SIZE] Total Size: $([math]::Round($totalSize/1MB, 2)) MB"
          Write-Host ""
          
          # Windows platform files
          $winFiles = Get-ChildItem -Path "$output_path" -Filter "*.dll" -Recurse
          Write-Host "[WIN] Windows Binary Files ($($winFiles.Count)):"
          $winFiles | ForEach-Object { Write-Host "  [FILE] File: $($_.FullName)" }
          Write-Host ""
          
          # Linux platform files
          $linuxFiles = Get-ChildItem -Path "$output_path" -Filter "*.so" -Recurse
          Write-Host "[LINUX] Linux Binary Files ($($linuxFiles.Count)):"
          $linuxFiles | ForEach-Object { Write-Host "  [FILE] File: $($_.FullName)" }
          Write-Host ""
          
          # Mac platform files
          $macFiles = Get-ChildItem -Path "$output_path" -Filter "*.dylib" -Recurse
          Write-Host "[MAC] Mac Binary Files ($($macFiles.Count)):"
          $macFiles | ForEach-Object { Write-Host "  [FILE] File: $($_.FullName)" }
          Write-Host ""
          
          # Plugin configuration files
          $upluginFiles = Get-ChildItem -Path "$output_path" -Filter "*.uplugin" -Recurse
          Write-Host "[CONFIG] Plugin Configuration Files ($($upluginFiles.Count)):"
          $upluginFiles | ForEach-Object { Write-Host "  [FILE] File: $($_.FullName)" }
          
        } else {
          Write-Error "[ERROR] Error: Build output directory not found: $output_path"
          exit 1
        }
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: XTools-UE_5.3-AllPlatforms
        path: PackagedPlugin/XTools-UE_5.3-AllPlatforms/
        retention-days: 7

  # Summarize build results
  summary:
    if: always()
    needs: [build-windows]
    runs-on: self-hosted  # Run summary on your local computer
    
    steps:
    - name: Build Summary
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "[INFO] Generating build summary report..."
        
        echo "## XTools Plugin Build Summary (UE 5.3 Focus)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Time:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> $GITHUB_STEP_SUMMARY
        echo "**Commit Hash:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Runner:** Self-Hosted" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### UE 5.3 Build Results" >> $GITHUB_STEP_SUMMARY
        $buildResult = "${{ needs.build-windows.result }}"
        if ($buildResult -eq "success") {
          echo "- **UE 5.3**: Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-Platform Support**: Win64 + Linux + Mac" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Name**: \`XTools-UE_5.3-AllPlatforms\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Retention**: 7 days" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps**: After successful testing, can add UE 5.4, 5.5, 5.6 versions to build matrix" >> $GITHUB_STEP_SUMMARY
        } else {
          echo "- **UE 5.3**: Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Troubleshooting**: Please check build logs for detailed error information" >> $GITHUB_STEP_SUMMARY
        }
        
        Write-Host "Build summary report generated"
