name: Build XTools Plugin (Simplified)

on:
  workflow_dispatch:

jobs:
  # Windows 构建 (使用您的本地电脑作为自托管运行器)
  build-windows:
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        ue_version: ['5.3']  # 先专注于5.3版本，跑通后再添加其他版本
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    # Use pre-installed UE version on your local computer
    - name: Setup UE Path
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        # Focus on UE 5.3 version - adjust according to your actual installation path
        # F Drive: F:\Epic Games\UE_5.3\Engine
        Write-Host "🔍 Detecting UE 5.3 installation path..."
        $ue_paths = @(
          "F:\Epic Games\UE_5.3",  # Your actual installation path (F drive)
          "D:\Program Files\Epic Games\UE_5.3",
          "C:\Program Files\Epic Games\UE_5.3"
        )
        
        $ue_path = $null
        foreach ($path in $ue_paths) {
          Write-Host "  Checking path: $path"
          if (Test-Path $path) {
            $ue_path = $path
            Write-Host "  ✅ Found UE installation: $path"
            break
          } else {
            Write-Host "  ❌ Path not found: $path"
          }
        }
        
        if (-not $ue_path) {
          Write-Error "❌ Error: UE 5.3 not found in any of these locations: $($ue_paths -join ', ')"
          exit 1
        }
        
        # 验证关键文件
        $uat_path = "$ue_path\Engine\Build\BatchFiles\RunUAT.bat"
        if (-not (Test-Path $uat_path)) {
          Write-Error "❌ Error: RunUAT.bat not found at: $uat_path"
          exit 1
        }
        
        echo "UE_PATH=$ue_path" >> $env:GITHUB_ENV
        echo "UE_VERSION=5.3" >> $env:GITHUB_ENV
        Write-Host "🎯 Using UE 5.3 installation at: $ue_path"
        Write-Host "🔧 Found RunUAT.bat at: $uat_path"
        
        # Detect VS2022 installation path (simplified)
        Write-Host "🔍 Detecting VS2022 installation path..."
        $vs_main_path = "E:\VisualStudio\2022"
        if (Test-Path $vs_main_path) {
          echo "VS2022INSTALLDIR=$vs_main_path" >> $env:GITHUB_ENV
          Write-Host "🔧 Found VS2022 at: $vs_main_path"
        } else {
          Write-Host "⚠️ Warning: VS2022 not found at E:\VisualStudio\2022, UE BuildTool will auto-detect"
        }
        
        # Verify plugin file exists
        $plugin_file = "${{ github.workspace }}\XTools.uplugin"
        Write-Host "🔍 Checking plugin file: $plugin_file"
        if (Test-Path $plugin_file) {
          Write-Host "✅ Plugin file exists: $plugin_file"
        } else {
          Write-Error "❌ Error: Plugin file not found: $plugin_file"
          exit 1
        }
        
    # Manual plugin build (supports three platforms: Win64+Linux+Mac)
    - name: Build Plugin
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "🚀 Starting XTools plugin build (UE 5.3)..."
        
        $plugin_path = "${{ github.workspace }}\XTools.uplugin"
        $output_path = "${{ github.workspace }}\PackagedPlugin\XTools-UE_5.3-AllPlatforms"
        $uat_path = "$env:UE_PATH\Engine\Build\BatchFiles\RunUAT.bat"
        
        Write-Host "📋 Build Configuration:"
        Write-Host "  🎮 UE Version: 5.3"
        Write-Host "  📦 Plugin File: $plugin_path"  
        Write-Host "  📁 Output Directory: $output_path"
        Write-Host "  🔧 UAT Tool: $uat_path"
        Write-Host "  🎯 Target Platforms: Win64+Linux+Mac"
        
        # Create output directory
        New-Item -ItemType Directory -Force -Path $output_path | Out-Null
        
        # Create temporary host project to build plugin (fixes generated.h missing issue)
        $tempProjectPath = "${{ github.workspace }}\TempProject"
        $tempProjectFile = "$tempProjectPath\TempProject.uproject"
        
        Write-Host "🔨 Creating temporary UE project..."
        New-Item -ItemType Directory -Force -Path $tempProjectPath | Out-Null
        
        # Create minimal .uproject file
        $uprojectContent = '{"FileVersion": 3,"EngineAssociation": "5.3","Category": "","Description": "","Modules": [],"Plugins": [{"Name": "XTools","Enabled": true}]}'
        
        $uprojectContent | Out-File -FilePath $tempProjectFile -Encoding UTF8
        Write-Host "✅ Temporary project created: $tempProjectFile"
        
        # Start building cross-platform plugin
        Write-Host "🏗️ Building plugin with host project..."
        Write-Host ""
        
        $buildArgs = @(
          "BuildPlugin"
          "-Plugin=`"$plugin_path`""
          "-Package=`"$output_path`""
          "-TargetPlatforms=Win64+Linux+Mac"
          "-StrictIncludes"
          "-Project=`"$tempProjectFile`""
        )
        
        Write-Host "⚡ Executing build command:"
        Write-Host "  $uat_path $($buildArgs -join ' ')"
        Write-Host ""
        
        & $uat_path @buildArgs
          
        if ($LASTEXITCODE -ne 0) {
          Write-Host ""
          Write-Error "❌ Error: Plugin build failed with exit code: $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        
        Write-Host ""
        Write-Host "🎉 Build completed: UE 5.3 plugin build successful"
        
        # Clean up temporary project
        Write-Host "🧹 Cleaning up temporary project..."
        if (Test-Path $tempProjectPath) {
          Remove-Item -Path $tempProjectPath -Recurse -Force
          Write-Host "✅ Temporary project cleaned up"
        }
        
    - name: List Build Output
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "🔍 Checking UE 5.3 build output..."
        $output_path = "${{ github.workspace }}\PackagedPlugin\XTools-UE_5.3-AllPlatforms"
        
        if (Test-Path $output_path) {
          Write-Host "✅ Build output directory exists: $output_path"
          Write-Host ""
          
          # 统计文件
          $allFiles = Get-ChildItem -Path $output_path -Recurse -File
          $totalSize = ($allFiles | Measure-Object -Property Length -Sum).Sum
          Write-Host "📊 Build Statistics:"
          Write-Host "  📁 Total Files: $($allFiles.Count)"
          Write-Host "  📏 Total Size: $([math]::Round($totalSize/1MB, 2)) MB"
          Write-Host ""
          
          # Windows平台文件
          $winFiles = Get-ChildItem -Path "$output_path" -Filter "*.dll" -Recurse
          Write-Host "🪟 Windows Binary Files ($($winFiles.Count)):"
          $winFiles | ForEach-Object { Write-Host "  📄 File: $($_.FullName)" }
          Write-Host ""
          
          # Linux平台文件  
          $linuxFiles = Get-ChildItem -Path "$output_path" -Filter "*.so" -Recurse
          Write-Host "🐧 Linux Binary Files ($($linuxFiles.Count)):"
          $linuxFiles | ForEach-Object { Write-Host "  📄 File: $($_.FullName)" }
          Write-Host ""
          
          # Mac平台文件
          $macFiles = Get-ChildItem -Path "$output_path" -Filter "*.dylib" -Recurse
          Write-Host "🍎 Mac Binary Files ($($macFiles.Count)):"
          $macFiles | ForEach-Object { Write-Host "  📄 File: $($_.FullName)" }
          Write-Host ""
          
          # 插件配置文件
          $upluginFiles = Get-ChildItem -Path "$output_path" -Filter "*.uplugin" -Recurse
          Write-Host "⚙️ Plugin Configuration Files ($($upluginFiles.Count)):"
          $upluginFiles | ForEach-Object { Write-Host "  📄 File: $($_.FullName)" }
          
        } else {
          Write-Error "❌ Error: Build output directory not found: $output_path"
          exit 1
        }
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: XTools-UE_5.3-AllPlatforms
        path: PackagedPlugin/XTools-UE_5.3-AllPlatforms/
        retention-days: 7

  # Summarize build results
  summary:
    if: always()
    needs: [build-windows]
    runs-on: self-hosted  # Run summary on your local computer
    
    steps:
    - name: Build Summary
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "📋 Generating build summary report..."
        
        echo "## XTools Plugin Build Summary (UE 5.3 Focus)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Time:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> $GITHUB_STEP_SUMMARY
        echo "**Commit Hash:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Runner:** Self-Hosted" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### UE 5.3 Build Results" >> $GITHUB_STEP_SUMMARY
        $buildResult = "${{ needs.build-windows.result }}"
        if ($buildResult -eq "success") {
          echo "- **UE 5.3**: Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-Platform Support**: Win64 + Linux + Mac" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Name**: \`XTools-UE_5.3-AllPlatforms\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Retention**: 7 days" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps**: After successful testing, can add UE 5.4, 5.5, 5.6 versions to build matrix" >> $GITHUB_STEP_SUMMARY
        } else {
          echo "- **UE 5.3**: Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Troubleshooting**: Please check build logs for detailed error information" >> $GITHUB_STEP_SUMMARY
        }
        
        Write-Host "Build summary report generated"
