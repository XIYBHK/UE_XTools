name: Build XTools Plugin (Dynamic Host Test)

on:
  workflow_dispatch:

jobs:
  # Windows build (using your local computer as self-hosted runner)
  build-windows:
    name: Build for Windows (UE ${{ matrix.ue_version }})
    runs-on: self-hosted

    strategy:
      fail-fast: false
      matrix:
        ue_version: ['5.3'] # 专注于UE 5.3版本

    steps:
    - name: Set Environment Variables
      run: |
        $UE_PATH = "F:\Epic Games\UE_${{ matrix.ue_version }}"
        $VS_PATH = "E:\VisualStudio\2022"
        echo "UE_PATH=$UE_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "VS2022INSTALLDIR=$VS_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Host "Runner will use UE version ${{ matrix.ue_version }}"

    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Build and Package Plugin
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "[START] Starting XTools plugin build (UE ${{ matrix.ue_version }}) using Dynamic Host strategy..."
        
        # --- STRATEGY V7: Dynamic Host Project ---
        # This strategy dynamically creates a temporary, clean host project inside the workspace.
        # It then uses the proven, reliable method of invoking UnrealBuildTool (UBT) directly.
        # This is fully automated and requires no pre-existing projects on the runner.

        $ue_version = "${{ matrix.ue_version }}"
        $output_name = "XTools-UE_${ue_version}-Win64-Test"
        $final_package_dir = "${{ github.workspace }}\PackagedPlugin\$output_name"

        # Step 1: Dynamically create a temporary host project.
        $temp_project_dir = "${{ github.workspace }}\TempHostProject"
        $temp_project_path = "$temp_project_dir\TempHostProject.uproject"
        New-Item -ItemType Directory -Force -Path $temp_project_dir | Out-Null
        
        $uproject_content = @"
        {
            "FileVersion": 3,
            "EngineAssociation": "$ue_version",
            "Category": "",
            "Description": ""
        }
"@
        Set-Content -Path $temp_project_path -Value $uproject_content -Encoding UTF8
        Write-Host "[SETUP] Dynamically created temporary host project at: $temp_project_path"

        # Step 2: Copy the plugin source into the temporary project.
        $source_plugin_repo_dir = "${{ github.workspace }}"
        $target_plugin_proj_dir = "$temp_project_dir\Plugins\XTools"
        New-Item -ItemType Directory -Force -Path (Split-Path $target_plugin_proj_dir) | Out-Null
        
        Write-Host "[SETUP] Copying plugin source to temporary project..."
        $exclude_dirs = @(Split-Path -Leaf $temp_project_dir, "PackagedPlugin", ".git")
        Get-ChildItem -Path $source_plugin_repo_dir -Exclude $exclude_dirs | Copy-Item -Destination $target_plugin_proj_dir -Recurse -Force
        Write-Host "[SUCCESS] Plugin copied."

        # Step 3: Initialize the Visual Studio Developer Environment. This remains CRITICAL.
        Write-Host "[CRITICAL] Initializing Visual Studio Developer Environment..."
        $vcvars_path = Join-Path $env:VS2022INSTALLDIR "VC\Auxiliary\Build\vcvarsall.bat"
        if (-not (Test-Path $vcvars_path)) {
            Write-Error "[ERROR] vcvarsall.bat not found at $vcvars_path."
            exit 1
        }
        
        # Step 4: Directly invoke UnrealBuildTool (UBT) to build the temporary project.
        Write-Host "[BUILD] Invoking UBT directly to build the temporary project..."
        $ubt_path = "$env:UE_PATH\Engine\Binaries\DotNET\UnrealBuildTool\UnrealBuildTool.dll"
        $dotnet_path = "$env:UE_PATH\Engine\Binaries\ThirdParty\DotNet\6.0.302\windows\dotnet.exe"

        $ubtArgs = @(
            "UnrealEditor",
            "Win64",
            "Development",
            "-Project=`"$temp_project_path`"",
            "-log=`"${{ github.workspace }}\ubt.log`""
        )
        
        $command_chain = "call `"$vcvars_path`" x64 && `"$dotnet_path`" `"$ubt_path`" $($ubtArgs -join ' ')"
        
        Write-Host "[EXEC] Executing UBT within a prepared VS environment..."
        Write-Host "  Command Chain: $command_chain"
        cmd.exe /c $command_chain
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "[ERROR] UBT build failed. Check the ubt.log artifact for details."
            exit $LASTEXITCODE
        }
        Write-Host "[SUCCESS] UBT build completed successfully."
        Write-Host ""
        
        # Step 5: Manually package the plugin with the newly compiled binaries.
        Write-Host "[PACKAGE] Manually packaging the plugin from the temporary project..."
        $built_plugin_dir = $target_plugin_proj_dir
        $binary_source_path = Join-Path $built_plugin_dir "Binaries\Win64"
        if (-not (Test-Path $binary_source_path)) {
            Write-Error "[ERROR] Build succeeded but no binaries were found at $binary_source_path"
            exit 1
        }
        
        New-Item -ItemType Directory -Force -Path $final_package_dir | Out-Null
        
        $include_dirs = @("Content", "Resources", "Source", "ThirdParty")
        $include_files = @("README.md", "XTools.uplugin")
        
        foreach ($dir in $include_dirs) {
            $source_dir = Join-Path $built_plugin_dir $dir
            if (Test-Path $source_dir) {
                Write-Host "  Copying directory: $dir"
                Copy-Item -Path $source_dir -Destination $final_package_dir -Recurse
            }
        }
        
        foreach ($file in $include_files) {
            $source_file = Join-Path $built_plugin_dir $file
            if (Test-Path $source_file) {
                Write-Host "  Copying file: $file"
                Copy-Item -Path $source_file -Destination $final_package_dir
            }
        }
        
        $binary_dest_path = Join-Path $final_package_dir "Binaries\Win64"
        New-Item -ItemType Directory -Force -Path $binary_dest_path | Out-Null
        Write-Host "  Copying and cleaning binaries (DLLs only)..."
        Get-ChildItem -Path $binary_source_path -Filter "*.dll" | Copy-Item -Destination $binary_dest_path
        
        Write-Host "[SUCCESS] Plugin packaging complete to $final_package_dir"
        Write-Host "[COMPLETE] Build process finished successfully."

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: XTools-UE_${{ matrix.ue_version }}-Win64-Test
        path: ${{ github.workspace }}/PackagedPlugin/XTools-UE_${{ matrix.ue_version }}-Win64-Test
        retention-days: 7
        
    - name: Upload UBT Log
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ubt-log-UE_${{ matrix.ue_version }}-Test
        path: ${{ github.workspace }}/ubt.log

  # Summarize build results
  summary:
    if: always()
    needs: [build-windows]
    runs-on: self-hosted
    
    steps:
    - name: Build Summary
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "[INFO] Generating build summary report..."
        
        echo "## XTools Plugin Build Summary (Dynamic Host Test)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Time:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### UE 5.3 Build Results" >> $GITHUB_STEP_SUMMARY
        $buildResult = "${{ needs.build-windows.result }}"
        if ($buildResult -eq "success") {
          echo "- **UE 5.3 (Dynamic Host)**: Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Name**: \`XTools-UE_5.3-Win64-Test\`" >> $GITHUB_STEP_SUMMARY
        } else {
          echo "- **UE 5.3 (Dynamic Host)**: Build Failed" >> $GITHUB_STEP_SUMMARY
        }
