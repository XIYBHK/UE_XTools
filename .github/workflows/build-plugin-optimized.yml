name: Build XTools Plugin (Optimized BuildPlugin)

on:
  workflow_dispatch:
      
jobs:
  build-windows-optimized:
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        ue_version: ['5.3','5.4','5.5','5.6']
    env:
      UE_VERSION: ${{ matrix.ue_version }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
      
    - name: Setup UE Environment
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        

        
        
        # UE版本（来自矩阵）
        $ue_version = "${{ matrix.ue_version }}"
        
        
        
        # 固定UE安装路径（自托管机）
        $ue_path = "F:\Epic Games\UE_$ue_version"
        
        if (-not (Test-Path $ue_path)) { throw ("UE install not found: " + $ue_path) }
        
        # 验证关键文件
        $runuat_path = "$ue_path\Engine\Build\BatchFiles\RunUAT.bat"
        $ue_editor_path = "$ue_path\Engine\Binaries\Win64\UnrealEditor.exe"
        
        if (-not (Test-Path $runuat_path)) {
          throw ("RunUAT.bat not found: " + $runuat_path)
        }
        
        if (-not (Test-Path $ue_editor_path)) {
          throw ("UnrealEditor.exe not found: " + $ue_editor_path)
        }
        
        # 验证插件文件
        $plugin_file = "${{ github.workspace }}\XTools.uplugin"
        if (-not (Test-Path $plugin_file)) {
          throw ("Plugin file not found: " + $plugin_file)
        }
        
        # 设置环境变量
        echo "UE_PATH=$ue_path" >> $env:GITHUB_ENV
        echo "UE_VERSION=$ue_version" >> $env:GITHUB_ENV
        echo "RUNUAT_PATH=$runuat_path" >> $env:GITHUB_ENV
        echo "UE_EDITOR_PATH=$ue_editor_path" >> $env:GITHUB_ENV
        echo "PLUGIN_FILE=$plugin_file" >> $env:GITHUB_ENV
        
        

    - name: Build Plugin with BuildPlugin Command
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        
        
        
        
        # 输出目录设置（使用 RUNNER_TEMP，避免写入仓库目录）
        $base_out = Join-Path $env:RUNNER_TEMP "XTools"
        $output_directory = Join-Path $base_out ("XTools-UE_" + $env:UE_VERSION + "-AllPlatforms")
        $temp_output = Join-Path $base_out "TempPackage"
        
        
        
        # 清理旧的输出目录
        if (Test-Path $temp_output) { Remove-Item -Recurse -Force $temp_output }
        if (Test-Path $output_directory) { Remove-Item -Recurse -Force $output_directory }
        
        # 创建输出目录
        New-Item -ItemType Directory -Force -Path $base_out | Out-Null
        New-Item -ItemType Directory -Force -Path $temp_output | Out-Null
        New-Item -ItemType Directory -Force -Path $output_directory | Out-Null

        # 暴露输出目录供后续步骤使用
        echo ("OUTPUT_DIR=" + $output_directory) >> $env:GITHUB_ENV
        
        
        
        # 执行BuildPlugin命令 - 使用与本地脚本相同的优化参数（避免嵌套引号）
        $pluginPath  = $env:PLUGIN_FILE
        $packagePath = $temp_output
        $buildArgs = @(
          "BuildPlugin",
          "-Plugin=$pluginPath",
          "-Package=$packagePath",
          "-CreateSubFolder",
          "-NoHostProject",
          "-Rocket"
        )
        
        
        
        & "${{ env.RUNUAT_PATH }}" @buildArgs
        
        if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
        
        

    - name: Post-Process and Optimize Package
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        
        
        
        
        $base_out = Join-Path $env:RUNNER_TEMP "XTools"
        $temp_output = Join-Path $base_out "TempPackage"
        $output_directory = "${{ env.OUTPUT_DIR }}"
        
        # 查找打包后的插件目录 (BuildPlugin可能创建子目录)
        $packaged_plugin_path = $temp_output
        $plugin_subdirs = Get-ChildItem -Path $temp_output -Directory
        if ($plugin_subdirs.Count -eq 1) {
          $packaged_plugin_path = $plugin_subdirs[0].FullName
          
        }
        
        if (-not (Test-Path $packaged_plugin_path)) {
          throw ("Packaged plugin directory not found: " + $packaged_plugin_path)
        }
        
        
        
        # 复制所有文件到最终输出目录
        
        Copy-Item -Path "$packaged_plugin_path\*" -Destination $output_directory -Recurse -Force
        
        # 1. 删除 Intermediate 文件夹
        $intermediate_path = Join-Path $output_directory "Intermediate"
        if (Test-Path $intermediate_path) {
          
          Remove-Item -Recurse -Force $intermediate_path
          
        } else {
          
        }
        
        # 2. 删除所有平台的 PDB 文件
        $binaries_path = Join-Path $output_directory "Binaries"
        if (Test-Path $binaries_path) {
          $pdb_files = Get-ChildItem -Path $binaries_path -Filter "*.pdb" -Recurse
          if ($pdb_files) {
            
            Remove-Item -Force $pdb_files.FullName
            
          } else {
            
          }
        }
        
        # 3. 删除临时构建目录
        
        Remove-Item -Recurse -Force $temp_output
        
        

    - name: Create Distribution Package
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        
        
        
        
        $output_directory = "${{ env.OUTPUT_DIR }}"
        # 获取最近标签（优先），否则回退到短SHA；处理自托管安全目录
        $repo = "${{ github.workspace }}"
        & git config --global --add safe.directory $repo 2>$null | Out-Null
        $tag = ""
        try {
          $tag = & git -C $repo describe --tags --abbrev=0 2>$null
        } catch {}
        if ([string]::IsNullOrWhiteSpace($tag)) {
          $commit = "${{ github.sha }}"
          $tag = $commit.Substring(0,7)
        }
        $zip_filename = "XTools-UE_${{ env.UE_VERSION }}-" + $tag + ".zip"
        $zip_filepath = Join-Path $env:RUNNER_TEMP $zip_filename
        
        if (Test-Path $zip_filepath) {
          
          Remove-Item -Force $zip_filepath
        }
        
        
        Compress-Archive -Path "$output_directory\*" -DestinationPath $zip_filepath
        
        $zip_size = [math]::Round((Get-Item $zip_filepath).Length / 1MB, 2)
        
        
        # 设置环境变量供后续步骤使用
        echo "ZIP_FILE_PATH=$zip_filepath" >> $env:GITHUB_ENV
        echo "ZIP_FILE_NAME=$zip_filename" >> $env:GITHUB_ENV

    - name: Validate Build Output
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        
        
        
        
        $output_path = "${{ env.OUTPUT_DIR }}"
        
        if (-not (Test-Path $output_path)) { throw ("Output directory not found: " + $output_path) }
        
        # 验证关键文件（最小化校验）
        $uplugin_file = Get-ChildItem -Path $output_path -Filter "*.uplugin" -Recurse
        if (-not $uplugin_file) { throw "Plugin .uplugin not found" }
        
        # 跳过平台二进制文件详细校验（最小化验证）
        
        

    - name: Upload Distribution Package
      uses: actions/upload-artifact@v4
      with:
        name: XTools-UE_${{ env.UE_VERSION }}-Distribution
        path: ${{ env.ZIP_FILE_PATH }}
        retention-days: 30

