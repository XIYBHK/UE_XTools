name: Build XTools Plugin (Optimized BuildPlugin)

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build-windows-optimized:
    runs-on: self-hosted
    timeout-minutes: 60  # 超时保护
    # 并发控制：同一 UE 版本同时只能运行一个构建
    concurrency:
      group: build-plugin-${{ github.ref }}-${{ matrix.ue_version }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        ue_version: ['5.0','5.2','5.3','5.4','5.5','5.6']
    env:
      UE_VERSION: ${{ matrix.ue_version }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
      
    - name: Setup UE Environment
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "==> Setup UE ${{ matrix.ue_version }} Environment" -ForegroundColor Cyan
        
        # UE installation path
        $ue_version = "${{ matrix.ue_version }}"
        $ue_path = "F:\Epic Games\UE_$ue_version"
        Write-Host "UE Path: $ue_path"
        
        if (-not (Test-Path $ue_path)) {
          throw "UE installation not found: $ue_path"
        }
        
        # Verify key files
        $runuat_path = "$ue_path\Engine\Build\BatchFiles\RunUAT.bat"
        $ue_editor_path = "$ue_path\Engine\Binaries\Win64\UnrealEditor.exe"
        
        if (-not (Test-Path $runuat_path)) {
          throw "RunUAT.bat not found: $runuat_path"
        }
        
        if (-not (Test-Path $ue_editor_path)) {
          throw "UnrealEditor.exe not found: $ue_editor_path"
        }
        
        # Verify plugin file
        $plugin_file = "${{ github.workspace }}\XTools.uplugin"
        if (-not (Test-Path $plugin_file)) {
          throw "Plugin file not found: $plugin_file"
        }
        
        Write-Host "[OK] Environment validation passed" -ForegroundColor Green
        
        # Set environment variables
        echo "UE_PATH=$ue_path" >> $env:GITHUB_ENV
        echo "UE_VERSION=$ue_version" >> $env:GITHUB_ENV
        echo "RUNUAT_PATH=$runuat_path" >> $env:GITHUB_ENV
        echo "UE_EDITOR_PATH=$ue_editor_path" >> $env:GITHUB_ENV
        echo "PLUGIN_FILE=$plugin_file" >> $env:GITHUB_ENV

    - name: Build Plugin with BuildPlugin Command
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "==> Build Plugin for UE ${{ env.UE_VERSION }}" -ForegroundColor Cyan
        $build_start = Get-Date
        
        # Output directory setup (use RUNNER_TEMP to avoid writing to repo)
        $base_out = Join-Path $env:RUNNER_TEMP "XTools"
        $output_directory = Join-Path $base_out ("XTools-UE_" + $env:UE_VERSION + "-AllPlatforms")
        $temp_output = Join-Path $base_out "TempPackage"
        
        Write-Host "Output Directory: $output_directory"
        
        # Clean old output directories
        if (Test-Path $temp_output) {
          Write-Host "Cleaning old temp directory..."
          Remove-Item -Recurse -Force $temp_output
        }
        if (Test-Path $output_directory) {
          Write-Host "Cleaning old output directory..."
          Remove-Item -Recurse -Force $output_directory
        }
        
        # Create output directories
        New-Item -ItemType Directory -Force -Path $base_out | Out-Null
        New-Item -ItemType Directory -Force -Path $temp_output | Out-Null
        New-Item -ItemType Directory -Force -Path $output_directory | Out-Null
        
        # Export output directories for later steps
        echo "OUTPUT_DIR=$output_directory" >> $env:GITHUB_ENV
        echo "TEMP_OUTPUT=$temp_output" >> $env:GITHUB_ENV
        
        # Execute BuildPlugin command
        $pluginPath = $env:PLUGIN_FILE
        $packagePath = $temp_output
        $buildArgs = @(
          "BuildPlugin",
          "-Plugin=$pluginPath",
          "-Package=$packagePath",
          "-CreateSubFolder",
          "-NoHostProject",
          "-Rocket"
        )
        
        Write-Host ""
        Write-Host "Starting build..." -ForegroundColor Yellow
        & "${{ env.RUNUAT_PATH }}" @buildArgs
        
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Build failed with exit code: $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        
        $build_duration = (Get-Date) - $build_start
        $duration_str = "{0:N0}m {1:N0}s" -f $build_duration.TotalMinutes, $build_duration.Seconds
        Write-Host ""
        Write-Host "[OK] Build completed in: $duration_str" -ForegroundColor Green
        
        echo "BUILD_DURATION=$duration_str" >> $env:GITHUB_ENV

    - name: Post-Process and Optimize Package
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "==> Post-Process and Optimize Package" -ForegroundColor Cyan
        
        $temp_output = "${{ env.TEMP_OUTPUT }}"
        $output_directory = "${{ env.OUTPUT_DIR }}"
        
        # Find packaged plugin directory (BuildPlugin may create subdirectory)
        $packaged_plugin_path = $temp_output
        $plugin_subdirs = Get-ChildItem -Path $temp_output -Directory -ErrorAction SilentlyContinue
        if ($plugin_subdirs.Count -eq 1) {
          $packaged_plugin_path = $plugin_subdirs[0].FullName
          Write-Host "Detected subdirectory: $($plugin_subdirs[0].Name)"
        }
        
        if (-not (Test-Path $packaged_plugin_path)) {
          throw "Packaged plugin directory not found: $packaged_plugin_path"
        }
        
        # Copy all files to final output directory
        Write-Host "Copying files to output directory..."
        Copy-Item -Path "$packaged_plugin_path\*" -Destination $output_directory -Recurse -Force
        
        # Optimization 1: Remove Intermediate folder
        $intermediate_path = Join-Path $output_directory "Intermediate"
        if (Test-Path $intermediate_path) {
          $size_before = (Get-ChildItem $intermediate_path -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          Remove-Item -Recurse -Force $intermediate_path
          Write-Host "[OK] Removed Intermediate folder (saved $([math]::Round($size_before, 2)) MB)"
        }
        
        # Optimization 2: Remove PDB files from all platforms
        $binaries_path = Join-Path $output_directory "Binaries"
        if (Test-Path $binaries_path) {
          $pdb_files = Get-ChildItem -Path $binaries_path -Filter "*.pdb" -Recurse -ErrorAction SilentlyContinue
          if ($pdb_files) {
            $pdb_size = ($pdb_files | Measure-Object -Property Length -Sum).Sum / 1MB
            Remove-Item -Force $pdb_files.FullName
            Write-Host "[OK] Removed PDB files (saved $([math]::Round($pdb_size, 2)) MB)"
          }
        }
        
        # Calculate final package size
        $final_size = (Get-ChildItem $output_directory -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
        Write-Host ""
        Write-Host "[OK] Optimization completed, final size: $([math]::Round($final_size, 2)) MB" -ForegroundColor Green
        
        echo "PACKAGE_SIZE_MB=$([math]::Round($final_size, 2))" >> $env:GITHUB_ENV
        
        # Remove temporary build directory
        if (Test-Path $temp_output) {
          Remove-Item -Recurse -Force $temp_output
        }

    - name: Prepare Artifact Name and Validate
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "==> Prepare Artifact and Validate" -ForegroundColor Cyan
        
        # Get version tag
        $repo = "${{ github.workspace }}"
        & git config --global --add safe.directory $repo 2>$null | Out-Null
        $tag = ""
        try {
          $tag = & git -C $repo describe --tags --abbrev=0 2>$null
        } catch {}
        if ([string]::IsNullOrWhiteSpace($tag)) {
          $commit = "${{ github.sha }}"
          $tag = $commit.Substring(0,7)
        }
        $artifact_name = "XTools-UE_${{ env.UE_VERSION }}-$tag"
        
        echo "VERSION_TAG=$tag" >> $env:GITHUB_ENV
        echo "ARTIFACT_NAME=$artifact_name" >> $env:GITHUB_ENV
        
        # Validate build output
        $output_path = "${{ env.OUTPUT_DIR }}"
        if (-not (Test-Path $output_path)) {
          throw "Output directory not found: $output_path"
        }
        
        # Validate key files
        $uplugin_file = Get-ChildItem -Path $output_path -Filter "*.uplugin" -Recurse
        if (-not $uplugin_file) {
          throw "Plugin .uplugin file not found"
        }
        Write-Host "[OK] Found plugin file: $($uplugin_file.Name)"
        
        # Validate Binaries directory
        $binaries_path = Join-Path $output_path "Binaries"
        if (Test-Path $binaries_path) {
          $dll_count = (Get-ChildItem -Path $binaries_path -Filter "*.dll" -Recurse).Count
          Write-Host "[OK] Found $dll_count binary files"
        }
        
        Write-Host ""
        Write-Host "[OK] Validation passed" -ForegroundColor Green

    - name: Generate Job Summary
      if: always()
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        $summary = @"
        ## Build Completed - UE ${{ env.UE_VERSION }}
        
        ### Build Information
        - **Version**: ${{ env.VERSION_TAG }}
        - **UE Version**: ${{ env.UE_VERSION }}
        - **Build Duration**: ${{ env.BUILD_DURATION }}
        - **Package Size**: ${{ env.PACKAGE_SIZE_MB }} MB
        - **Artifact Name**: ``${{ env.ARTIFACT_NAME }}``
        
        ### Build Status
        - [OK] Compilation successful
        - [OK] Post-processing completed
        - [OK] Validation passed
        
        ### Download
        Artifact uploaded to Actions Artifacts, retained for 30 days.
        "@
        
        $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8

    - name: Upload Distribution Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.OUTPUT_DIR }}
        retention-days: 30
        compression-level: 9

    - name: Cleanup Temporary Files
      if: always()
      shell: powershell -ExecutionPolicy Bypass -File {0}
      run: |
        Write-Host "==> Cleanup Temporary Files" -ForegroundColor Cyan
        
        # Clean build directory in RUNNER_TEMP
        $base_out = Join-Path $env:RUNNER_TEMP "XTools"
        if (Test-Path $base_out) {
          try {
            $size = (Get-ChildItem $base_out -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1MB
            Remove-Item -Recurse -Force $base_out -ErrorAction Stop
            Write-Host "[OK] Cleanup completed, freed $([math]::Round($size, 2)) MB" -ForegroundColor Green
          } catch {
            Write-Warning "Cleanup failed: $_"
          }
        }

